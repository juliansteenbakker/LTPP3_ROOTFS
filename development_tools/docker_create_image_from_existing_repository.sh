#!/bin/bash
#Define constants
DOCKER__EMPTYSTRING=""
DOCKER__READ_FG_EXITING_NOW="Exiting now..."

#---Define colors
DOCKER__NOCOLOR=$'\e[0;0m'
DOCKER__GENERAL_FG_YELLOW=$'\e[1;33m'
DOCKER__ERROR_FG_LIGHTRED=$'\e[1;31m'
DOCKER__IMAGEID_FG_BORDEAUX=$'\e[30;38;5;198m'
DOCKER__REPOSITORY_FG_PURPLE=$'\e[30;38;5;93m'
DOCKER__NEW_REPOSITORY_FG_BRIGHTLIGHTPURPLE=$'\e[30;38;5;147m'
DOCKER__TAG_FG_LIGHTPINK=$'\e[30;38;5;218m'
DOCKER__DIRS_FG_VERYLIGHTORANGE=$'\e[30;38;5;223m'

DOCKER__TITLE_BG_ORANGE=$'\e[30;48;5;215m'
DOCKER__TITLE_BG_LIGHTBLUE='\e[30;48;5;45m'
DOCKER__DIRS_BG_VERYLIGHTORANGE=$'\e[30;48;5;223m'

#---Define constants
DOCKER__TITLE="TIBBO"
docker__myrepository=""
docker__myrepository_new=""
docker__myrepository_tag=""
docker__myrepository_isFound=""
docker__myrepository_new_isFound=""
docker__mydockerfile_location=""
docker__mytag_isFound=""
docker__myanswer=""


#---Trap ctrl-c and Call ctrl_c()
trap CTRL_C__func INT

function CTRL_C__func() {
    echo -e "\r"
    echo -e "\r"
    echo -e ${DOCKER__READ_FG_EXITING_NOW}
    echo -e "\r"
    echo -e "\r"

    exit
}


#---Local functions & subroutines
press_any_key__localfunc() {
	#Define constants
	local cTIMEOUT_ANYKEY=10

	#Initialize variables
	local keypressed=""
	local tcounter=0

	#Show Press Any Key message with count-down
	echo -e "\r"
	while [[ ${tcounter} -le ${cTIMEOUT_ANYKEY} ]];
	do
		delta_tcounter=$(( ${cTIMEOUT_ANYKEY} - ${tcounter} ))

		echo -e "\rPress (a)bort or any key to continue... (${delta_tcounter}) \c"
		read -N 1 -t 1 -s -r keypressed

		if [[ ! -z "${keypressed}" ]]; then
			if [[ "${keypressed}" == "a" ]] || [[ "${keypressed}" == "A" ]]; then
				exit
			else
				break
			fi
		fi
		
		tcounter=$((tcounter+1))
	done
	echo -e "\r"
}

docker__load_header__sub() {
    echo -e "\r"
    echo -e "${DOCKER__TITLE_BG_ORANGE}                                 ${DOCKER__TITLE}${DOCKER__TITLE_BG_ORANGE}                                ${DOCKER__NOCOLOR}"
}

docker__environmental_variables__sub() {
    #Define paths
    dockerfile_filename="dockerfile_auto"
    docker__current_dir=`dirname "$0"`
    docker__parent_dir=${docker__current_dir%/*}    #gets one directory up
    dockerfile_dir=${docker__parent_dir}/docker/dockerfiles
    dockerfile_fpath=""
}

create_dockerfile__sub() {
    #Input args
    local dockerfile_input=${1}
    local repository_input=${2}
    local directory_input=${3}

    #Generate timestamp
    # local filename_w_timestamp=${dockerfile_input}_${repository_input}_${dockerfile_timestamp}
    local dockerfile_autogenerated=${dockerfile_input}_${repository_input}

    #Define filename
    dockerfile_fpath=${directory_input}/${dockerfile_autogenerated}

    #Define dockerfile content
    DOCKERFILE_CONTENT_ARR=(\
        "#---Continue from REPOSITORY:TAG=${docker__myrepository}:${mytag}"\
        "FROM ${docker__myrepository}:${mytag}"\
        ""\
        "#---LABEL about the custom image"\
        "LABEL maintainer=\"hien@tibbo.com\""\
        "LABEL version=\"0.1\""\
        "LABEL description=\"Continue from image '${docker__myrepository}:${mytag}', and run 'build_BOOOT_BIN.sh'\""\
        "LABEL NEW repository:tag=\"${docker__myrepository_new}:${mytag}\""\
        ""\
        "#---Disable Prompt During Packages Installation"\
        "ARG DEBIAN_FRONTEND=noninteractive"\
        ""\
        "#---Update local Git repository"\
        "#RUN cd ~/LTPP3_ROOTFS && git pull"\
        ""\
        "#---Run Prepreparation of Disk (before Chroot)"\
        "#RUN cd ~ && ~/LTPP3_ROOTFS/build_BOOOT_BIN.sh"\
    )


    #Cycle thru array and write each row to Global variable 'dockerfile_fpath'
	for ((i=0; i<${#DOCKERFILE_CONTENT_ARR[@]}; i++))
	do
        echo -e "${DOCKERFILE_CONTENT_ARR[$i]}" >> ${dockerfile_fpath}
	done
}

docker__build_image_from_specified_repository__sub() {
    #Get number of images
    local numof_images=`docker image ls | head -n -1 | wc -l`

    #Show Docker Image List
    echo -e "----------------------------------------------------------------------"
    echo -e "\t${DOCKER__GENERAL_FG_YELLOW}Create${DOCKER__NOCOLOR} Docker ${DOCKER__IMAGEID_FG_BORDEAUX}IMAGE${DOCKER__NOCOLOR} from existing ${DOCKER__REPOSITORY_FG_PURPLE}REPOSITORY${DOCKER__NOCOLOR}"
    echo -e "----------------------------------------------------------------------"
        docker image ls

    if [[ ${numof_images} -eq 0 ]]; then
        echo -e "\r"
        echo -e "\t\t=:${DOCKER__ERROR_FG_LIGHTRED}NO IMAGES FOUND${DOCKER__NOCOLOR}:="
        echo -e "----------------------------------------------------------------------"
        echo -e "\r"
        
        press_any_key__localfunc

        exit
    else
        echo -e "----------------------------------------------------------------------"
    fi    


    #Create timestamp
    # dockerfile_timestamp=$(date +%y%m%d%H%M%S)

    while true
    do
        #Provide a CONTAINER-ID from which you want to create an Image
        read -p "Choose a ${DOCKER__REPOSITORY_FG_PURPLE}REPOSITORY${DOCKER__NOCOLOR} from list (e.g. ubuntu_buildbin): " docker__myrepository
        if [[ ! -z ${docker__myrepository} ]]; then    #input is NOT an EMPTY STRING

            #Check if 'docker__myrepository' is found in ' docker container ls'
            docker__myrepository_isFound=`docker image ls | awk '{print $1}' | grep -w ${docker__myrepository}`
            if [[ ! -z ${docker__myrepository_isFound} ]]; then    #match was found

                while true
                do
                    #Find tag belonging to 'docker__myrepository' (Exact Match)
                    docker__myrepository_tag=$(docker image ls | grep -w "${docker__myrepository}" | awk '{print $2}')

                    #Provide a TAG for this new image
                    read -e -p "Provide the ${DOCKER__TAG_FG_LIGHTPINK}TAG${DOCKER__NOCOLOR} (e.g. latest) matching with REPOSITORY ${DOCKER__REPOSITORY_FG_PURPLE}${docker__myrepository}${DOCKER__NOCOLOR}: " -i ${docker__myrepository_tag} mytag
                    if [[ ! -z ${mytag} ]]; then   #input is NOT an Empty String        

                        docker__mytag_isFound=`docker image ls | grep -w "${docker__myrepository}" | grep -w "${mytag}"`    #check if 'docker__myrepository' AND 'mytag' is found in 'docker image ls'
                        if [[ ! -z ${docker__mytag_isFound} ]]; then    #match was found

                            while true
                            do
                                #Provide a NEW REPOSITORY for the NEW image
                                read -p "Provide a ${DOCKER__GENERAL_FG_YELLOW}NEW${DOCKER__NOCOLOR} ${DOCKER__NEW_REPOSITORY_FG_BRIGHTLIGHTPURPLE}REPOSITORY${DOCKER__NOCOLOR} name (e.g. ubuntu_buildbin_NEW): " docker__myrepository_new
                                if [[ ! -z ${docker__myrepository_new} ]]; then #not an EMPTY STRING

                                    #Check if 'docker__myrepository' is UNIQUE
                                    docker__myrepository_new_isFound=`docker image ls | awk '{print $1}' | grep -w ${docker__myrepository_new}`                           
                                    if  [[ -z ${docker__myrepository_new_isFound} ]]; then    #match was NOT found

                                        while true
                                        do
                                            #Provide a location where you want to create a *NEW DOCKERFILE*
                                            echo -e "Provide ${DOCKER__DIRS_BG_VERYLIGHTORANGE}DOCKER-FILE LOCATION${DOCKER__NOCOLOR} (${dockerfile_dir}): "
                                            echo -e "${DOCKER__DIRS_FG_VERYLIGHTORANGE}"    #echo used to start a color for 'read'
                                            read -e -p $'\t' -i "${dockerfile_dir}" docker__mydockerfile_location
                                            echo -e "${DOCKER__NOCOLOR}"    #echo used to reset color

                                            if [[ -d ${docker__mydockerfile_location} ]]; then   #input was NOT an Empty String
                                                #Generate a 'dockerfile' with content
                                                #OUTPUT: dockerfile_fpath
                                                create_dockerfile__sub "${dockerfile_filename}" ${docker__myrepository_new} "${docker__mydockerfile_location}"

                                                echo -e "\r"
                                                echo -e "--------------------------------------------------------------------"
                                                echo -e "Summary"
                                                echo -e "--------------------------------------------------------------------"
                                                echo -e "EXISTING ${DOCKER__REPOSITORY_FG_PURPLE}REPOSITORY${DOCKER__NOCOLOR}:${DOCKER__TAG_FG_LIGHTPINK}TAG${DOCKER__NOCOLOR}:\t${docker__myrepository}:${mytag}"                                        
                                                echo -e "NEW ${DOCKER__NEW_REPOSITORY_FG_BRIGHTLIGHTPURPLE}REPOSITORY${DOCKER__NOCOLOR}:${DOCKER__TAG_FG_LIGHTPINK}TAG${DOCKER__NOCOLOR}:\t\t${docker__myrepository_new}:${mytag}"
                                                echo -e "${DOCKER__DIRS_BG_VERYLIGHTORANGE}DOCKER-FILE LOCATION${DOCKER__NOCOLOR}:\t\t${dockerfile_fpath}"
                                                echo -e ""

                                                #Confirm if user wants to continue
                                                while true
                                                do
                                                    read -p "Do you wish to continue (y/n/q)? " docker__myanswer
                                                    if [[ ${docker__myanswer} == "y" ]]; then
                                                        docker build --tag ${docker__myrepository_new}:${mytag} - < ${dockerfile_fpath}
                                                        
                                                        echo -e "\r"
                                                        echo -e "\r"
                                                        echo -e "----------------------------------------------------------------------"
                                                            docker image ls
                                                        echo -e "----------------------------------------------------------------------"
                                                        echo -e "\r"

                                                        exit
                                                    elif [[ ${docker__myanswer} == "n" ]]; then
                                                        tput cuu1
                                                        tput el

                                                        break
                                                    elif [[ ${docker__myanswer} == "q" ]]; then
                                                        echo -e "\r"
                                                        echo -e ${DOCKER__READ_FG_EXITING_NOW}
                                                        echo -e "\r"
                                                        echo -e "\r"

                                                        exit
                                                    else
                                                        tput cuu1	#move UP with 1 line
                                                        tput el		#clear until the END of line                                                    
                                                    fi
                                                done
                                            else    #input was an Empty String
                                                echo -e "\r"
                                                echo -e "***${DOCKER__ERROR_FG_LIGHTRED}ERROR${DOCKER__NOCOLOR}: unknown directory: ${docker__mydockerfile_location}!!!"

                                                press_any_key__localfunc

                                                tput cuu1	#move UP with 1 line
                                                tput el		#clear until the END of line 
                                                tput cuu1	#move UP with 1 line
                                                tput el		#clear until the END of line
                                                tput cuu1	#move UP with 1 line
                                                tput el		#clear until the END of line
                                                tput cuu1	#move UP with 1 line
                                                tput el		#clear until the END of line 
                                            fi

                                            #Answer 'n' was given in the LAST while-loop
                                            if [[ ${docker__myanswer} == "n" ]]; then
                                                break
                                            fi
                                        done
                                    else
                                        echo -e "\r"
                                        echo -e "***${DOCKER__ERROR_FG_LIGHTRED}ERROR${DOCKER__NOCOLOR}: REPOSITORY ${DOCKER__REPOSITORY_FG_PURPLE}${docker__myrepository_new}${DOCKER__NOCOLOR} already exist!!!"

                                        press_any_key__localfunc

                                        tput cuu1	#move UP with 1 line
                                        tput el		#clear until the END of line
                                        tput cuu1	#move UP with 1 line
                                        tput el		#clear until the END of line
                                        tput cuu1	#move UP with 1 line
                                        tput el		#clear until the END of line
                                        tput cuu1	#move UP with 1 line
                                        tput el		#clear until the END of line
                                        tput cuu1	#move UP with 1 line
                                        tput el		#clear until the END of line 
                                    fi
                                else
                                    tput cuu1	#move UP with 1 line
                                    tput el		#clear until the END of line 
                                fi

                                #Answer 'n' was given in the LAST while-loop
                                if [[ ${docker__myanswer} == "n" ]]; then
                                    break
                                fi
                            done
                        else    #input was an Empty String
                            echo -e "\r"
                            echo -e "***${DOCKER__ERROR_FG_LIGHTRED}ERROR${DOCKER__NOCOLOR}: ${DOCKER__TAG_FG_LIGHTPINK}TAG${DOCKER__NOCOLOR} and ${DOCKER__REPOSITORY_FG_PURPLE}REPOSITORY${DOCKER__NOCOLOR} do NOT match!!!"

                            press_any_key__localfunc

                            tput cuu1	#move UP with 1 line
                            tput el		#clear until the END of line
                            tput cuu1	#move UP with 1 line
                            tput el		#clear until the END of line
                            tput cuu1	#move UP with 1 line
                            tput el		#clear until the END of line
                            tput cuu1	#move UP with 1 line
                            tput el		#clear until the END of line
                            tput cuu1	#move UP with 1 line
                            tput el		#clear until the END of line 
                        fi
                    else
                        tput cuu1	#move UP with 1 line
                        tput el		#clear until the END of line
                    fi

                    #Answer 'n' was given in the LAST while-loop
                    if [[ ${docker__myanswer} == "n" ]]; then
                        echo -e "\r"
                        echo -e "----------------------------------------------------------------------"
                            docker image ls
                        echo -e "----------------------------------------------------------------------"
                        
                        break
                    fi
                done
            else    #NO match was found
                echo -e "\r"
                echo -e "***${DOCKER__ERROR_FG_LIGHTRED}ERROR${DOCKER__NOCOLOR}: ${DOCKER__REPOSITORY_FG_PURPLE}${docker__myrepository}${DOCKER__NOCOLOR} not found!!!"

                press_any_key__localfunc

                tput cuu1	#move UP with 1 line
                tput el		#clear until the END of line  
                tput cuu1	#move UP with 1 line
                tput el		#clear until the END of line    
                tput cuu1	#move UP with 1 line
                tput el		#clear until the END of line
                tput cuu1	#move UP with 1 line
                tput el		#clear until the END of line
                tput cuu1	#move UP with 1 line
                tput el		#clear until the END of line                
            fi
        else
            tput cuu1	#move UP with 1 line
            tput el		#clear until the END of line
        fi
    done
}


main_sub() {
    docker__load_header__sub

    docker__environmental_variables__sub

    docker__build_image_from_specified_repository__sub
}


#Execute main subroutine
main_sub

